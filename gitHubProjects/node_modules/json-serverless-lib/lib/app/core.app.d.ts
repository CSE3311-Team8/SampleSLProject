/// <reference types="qs" />
import { AppConfig } from './app.config';
import * as lowdb from 'lowdb';
import express from 'express';
import { StorageAdapter } from '../storage/storage';
import { ApiSpecification } from '../specifications/apispecification';
import { Environment } from '../environment';
import { AuthStrategy } from '../auth/auth.strategy';
export declare class CoreApp {
    private storageAdapter;
    private storage;
    private adapter;
    private swaggerSpec;
    private appConfig;
    protected server: express.Express;
    private apispec;
    private graphqlSchema;
    private environment;
    private authStrategy;
    constructor(appConfig: AppConfig, server: express.Express, storageAdapter: StorageAdapter, apispec: ApiSpecification, environment: Environment, authStrategy: AuthStrategy);
    setup(): Promise<void>;
    private setupAuthentication;
    private setupMiddleware;
    protected setupStorage(storageAdapter: StorageAdapter): Promise<lowdb.LowdbAsync<object>>;
    protected validateJSON(db: {}): boolean;
    protected setupRoutes(db: {}, middlewares: any, router: any, appConfig: AppConfig): Promise<void>;
    protected initializeLayers(): {
        middlewares: express.RequestHandler<import("express-serve-static-core").ParamsDictionary, any, any, import("qs").ParsedQs>[];
        router: express.Router;
    };
}
//# sourceMappingURL=core.app.d.ts.map