'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var AWS = require('aws-sdk/global');
var S3_CLIENT = require('aws-sdk/clients/s3');
var stringify = function stringify(obj) {
  return JSON.stringify(obj, null, 2);
};

module.exports = function () {
  function _class() {
    var source = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'db.json';

    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref$defaultValue = _ref.defaultValue,
        defaultValue = _ref$defaultValue === undefined ? {} : _ref$defaultValue,
        _ref$serialize = _ref.serialize,
        serialize = _ref$serialize === undefined ? stringify : _ref$serialize,
        _ref$deserialize = _ref.deserialize,
        deserialize = _ref$deserialize === undefined ? JSON.parse : _ref$deserialize,
        _ref$aws = _ref.aws,
        aws = _ref$aws === undefined ? {} : _ref$aws;

    _classCallCheck(this, _class);

    this.source = source;
    this.defaultValue = defaultValue;
    this.serialize = serialize;
    this.deserialize = deserialize;
    this.contentType = aws.contentType || 'application/json';
    this.cognitoCredentials = aws.cognitoCredentials || false;
    this.bucketName = aws.bucketName || 'lowdb-data';
    this.acl = aws.acl || 'private';

    var options = { apiVersion: '2006-03-01' };

    if (this.cognitoCredentials) {
      options.credentials = new AWS.CognitoIdentityCredentials(this.cognitoCredentials);
    }

    this.S3 = new S3_CLIENT(options);
  }

  _createClass(_class, [{
    key: 'read',
    value: function read() {
      var _this = this;

      return new Promise(function (resolve, reject) {
        _this.S3.getObject({ Bucket: _this.bucketName, Key: _this.source }).promise().then(function (data) {
          resolve(_this.deserialize(data.Body));
        }).catch(function (err) {
          if (err.code === 'NoSuchKey') {
            _this.write(_this.defaultValue).then(function () {
              return resolve(_this.defaultValue);
            }).catch(reject);
          } else {
            reject(err);
          }
        });
      });
    }
  }, {
    key: 'write',
    value: function write(data) {
      return this.S3.putObject({
        Body: this.serialize(data),
        Bucket: this.bucketName,
        Key: this.source,
        ContentType: this.contentType,
        ACL: this.acl
      }).promise();
    }
  }]);

  return _class;
}();