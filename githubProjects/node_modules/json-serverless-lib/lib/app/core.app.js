"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CoreApp = void 0;
var logger_1 = require("../utils/logger");
var app_config_1 = require("./app.config");
var swagger_ui_express_1 = __importDefault(require("swagger-ui-express"));
var lowdb = __importStar(require("lowdb"));
var express_1 = __importDefault(require("express"));
var jsonServer = require("json-server");
var json_validator_1 = require("../validations/json.validator");
var express_graphql_1 = require("express-graphql");
var swagger_to_graphql_1 = require("swagger-to-graphql");
var cors_1 = __importDefault(require("cors"));
var grapqhl_callback_1 = require("../utils/grapqhl_callback");
var output_1 = require("../utils/output");
var validationresult_1 = require("../validations/validationresult");
var helmet_1 = __importDefault(require("helmet"));
var CoreApp = /** @class */ (function () {
    function CoreApp(appConfig, server, storageAdapter, apispec, environment, authStrategy) {
        this.storage = {};
        this.adapter = {};
        this.swaggerSpec = null;
        this.graphqlSchema = null;
        this.appConfig = appConfig;
        this.server = server;
        this.storageAdapter = storageAdapter;
        this.apispec = apispec;
        this.environment = environment;
        this.authStrategy = authStrategy;
        logger_1.Logger.init(appConfig.logLevel);
        output_1.Output.setDebugInfo('environment: ' + JSON.stringify(this.environment));
    }
    CoreApp.prototype.setup = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, json, _b, middlewares, router;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        this.setupAuthentication();
                        this.setupMiddleware();
                        _a = this;
                        return [4 /*yield*/, this.setupStorage(this.storageAdapter)];
                    case 1:
                        _a.adapter = _c.sent();
                        return [4 /*yield*/, this.adapter.getState()];
                    case 2:
                        json = _c.sent();
                        if (!this.validateJSON(json)) return [3 /*break*/, 4];
                        _b = this.initializeLayers(), middlewares = _b.middlewares, router = _b.router;
                        return [4 /*yield*/, this.setupRoutes(json, middlewares, router, this.appConfig)];
                    case 3:
                        _c.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        output_1.Output.setError('provided json is not valid - please solve the mentioned issues first to go ahead');
                        throw Error('provided json is not valid - please solve the mentioned issues first');
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    CoreApp.prototype.setupAuthentication = function () {
        if (this.appConfig.enableApiKeyAuth) {
            this.authStrategy.init();
        }
    };
    CoreApp.prototype.setupMiddleware = function () {
        this.server.use(helmet_1.default({
            contentSecurityPolicy: {
                directives: {
                    defaultSrc: ["'self'", "'unsafe-inline'", 'data'],
                    scriptSrc: ["'self'", "'unsafe-inline'", "'unsafe-eval'"],
                    imgSrc: ["'self'", 'data:'],
                },
            },
        }));
        this.server.use(cors_1.default());
        this.server.use(express_1.default.json());
        this.server.use(express_1.default.urlencoded({ extended: true }));
    };
    CoreApp.prototype.setupStorage = function (storageAdapter) {
        return __awaiter(this, void 0, void 0, function () {
            var adapter;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.storage = storageAdapter.init();
                        return [4 /*yield*/, lowdb.default(this.storage)];
                    case 1:
                        adapter = _a.sent();
                        return [2 /*return*/, adapter];
                }
            });
        });
    };
    CoreApp.prototype.validateJSON = function (db) {
        var validationResult = new validationresult_1.ValidationResult();
        if (this.appConfig.enableJSONValidation) {
            validationResult = json_validator_1.JSONValidator.validate(db, this.appConfig.enableSwagger);
            if (!validationResult.isValid ||
                this.appConfig.logLevel === app_config_1.LogLevel.debug) {
                output_1.Output.printValidationReport(validationResult);
            }
        }
        return validationResult.isValid;
    };
    CoreApp.prototype.setupRoutes = function (db, middlewares, router, appConfig) {
        return __awaiter(this, void 0, void 0, function () {
            var swaggerSetupMiddleware, req, res, _a;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        middlewares.splice(middlewares.findIndex(function (x) { return x.name === 'serveStatic'; }), 1);
                        this.server.use(middlewares);
                        this.server.use(appConfig.routes.apiRoutePath, router);
                        if (!(!this.swaggerSpec && appConfig.enableSwagger)) return [3 /*break*/, 2];
                        this.swaggerSpec = this.apispec.generateSpecification(db, true);
                        swaggerSetupMiddleware = swagger_ui_express_1.default.setup(this.swaggerSpec);
                        req = {};
                        res = { send: function () { } };
                        swaggerSetupMiddleware(req, res, function () { return function (err) {
                            console.log(err);
                        }; });
                        _a = this;
                        return [4 /*yield*/, swagger_to_graphql_1.createSchema({
                                swaggerSchema: this.swaggerSpec,
                                callBackend: function (args) { return __awaiter(_this, void 0, void 0, function () {
                                    var graphqlRequest, httpProtocol;
                                    return __generator(this, function (_a) {
                                        graphqlRequest = args.context['req'];
                                        httpProtocol = graphqlRequest
                                            .get('host')
                                            .startsWith('localhost')
                                            ? 'http'
                                            : graphqlRequest.protocol;
                                        return [2 /*return*/, grapqhl_callback_1.GraphQLMethods.callRestBackend({
                                                requestOptions: {
                                                    bodyType: args.requestOptions.bodyType,
                                                    method: args.requestOptions.method,
                                                    path: args.requestOptions.path,
                                                    baseUrl: this.environment.basePath === '/'
                                                        ? httpProtocol + '://' + graphqlRequest.get('host')
                                                        : httpProtocol +
                                                            '://' +
                                                            graphqlRequest.get('host') +
                                                            this.environment.basePath,
                                                    body: args.requestOptions.method === 'get'
                                                        ? ''
                                                        : args.requestOptions.body,
                                                    headers: graphqlRequest.headers,
                                                    query: graphqlRequest.query,
                                                },
                                                context: graphqlRequest,
                                            })];
                                    });
                                }); },
                            })];
                    case 1:
                        _a.graphqlSchema = _b.sent();
                        this.server.use(appConfig.routes.graphqlRoutePath, function (req, res) {
                            var graphqlFunc = express_graphql_1.graphqlHTTP({
                                schema: _this.graphqlSchema,
                                graphiql: { headerEditorEnabled: true },
                                context: {
                                    req: req,
                                },
                            });
                            return graphqlFunc(req, res);
                        });
                        this.server.use(appConfig.routes.swaggerSpecRoutePath, function (req, res) {
                            res.setHeader('Content-Type', 'application/json');
                            res.send(_this.swaggerSpec);
                        });
                        this.server.use(appConfig.routes.swaggerUIRoutePath, swagger_ui_express_1.default.serveWithOptions({ redirect: false }));
                        this.server.use('/', swagger_ui_express_1.default.serveWithOptions({ redirect: false }));
                        this.server.get(appConfig.routes.swaggerUIRoutePath, swagger_ui_express_1.default.setup(this.swaggerSpec));
                        _b.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    CoreApp.prototype.initializeLayers = function () {
        var router = jsonServer.router(this.adapter);
        var middlewares = jsonServer.defaults({
            readOnly: this.appConfig.readOnly,
        });
        return { middlewares: middlewares, router: router };
    };
    return CoreApp;
}());
exports.CoreApp = CoreApp;
