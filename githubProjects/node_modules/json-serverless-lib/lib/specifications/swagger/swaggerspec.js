"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SwaggerSpec = void 0;
var lodash_1 = __importDefault(require("lodash"));
var listEndpoints = require('express-list-endpoints');
var fs_1 = __importDefault(require("fs"));
var PackageInfo = /** @class */ (function () {
    function PackageInfo() {
        this.name = '';
        this.version = '';
        this.title = '';
        this.license = '';
        this.description = '';
    }
    return PackageInfo;
}());
var SwaggerSpec = /** @class */ (function () {
    function SwaggerSpec(packageInfoFilePath) {
        var _this = this;
        this.packageJsonPath = process.cwd() + "/package.json";
        this.packageInfo = new PackageInfo();
        this.app = {};
        this.predefinedSpec = {};
        this.spec = {};
        this.getSpec = function (app, predefinedSpec, readOnly, basePath, apiRoutePath, specPath) {
            _this.app = app;
            _this.predefinedSpec = predefinedSpec;
            _this.spec = _this.initSpec(readOnly, basePath, apiRoutePath, specPath);
            return _this.spec;
        };
        this.addSchemaDefitions = function (specification, schemaDefinitons) {
            var spec = Object.assign(specification, schemaDefinitons);
            Object.keys(spec.paths).forEach(function (path) {
                Object.keys(spec.definitions).forEach(function (definition) {
                    var schemaDef = _this.setSchemaReference(spec, definition);
                    if (path.endsWith(definition)) {
                        if (spec.paths[path].get) {
                            var operation = spec.paths[path].get;
                            Object.assign(spec.paths[path].get, _this.getDefaultSchemaProperties(definition));
                            operation.responses[200] = {
                                schema: { $ref: "#/definitions/" + definition },
                                description: 'successful operation',
                            };
                            operation.parameters = _this.getQueryParameterSchema();
                        }
                        if (spec.paths[path].post) {
                            var operation = spec.paths[path].post;
                            Object.assign(operation, _this.getDefaultSchemaProperties(definition));
                            Object.assign(operation, _this.getDefaultPostResponses(definition, schemaDef));
                            operation.parameters.push(_this.getDefaultParameterSchema(schemaDef, definition));
                        }
                        if (spec.paths[path].put) {
                            var operation = spec.paths[path].put;
                            Object.assign(operation, _this.getDefaultSchemaProperties(definition));
                            Object.assign(operation, _this.getDefaultPutResponses(definition, schemaDef));
                            operation.parameters.push(_this.getDefaultParameterSchema(schemaDef, definition));
                        }
                        if (spec.paths[path].patch) {
                            var operation = spec.paths[path].patch;
                            Object.assign(operation, _this.getDefaultSchemaProperties(definition));
                            Object.assign(operation, _this.getDefaultPutResponses(definition, schemaDef));
                            operation.parameters.push(_this.getDefaultParameterSchema(schemaDef, definition));
                        }
                    }
                    if (path.endsWith(definition + "/{id}")) {
                        if (spec.paths[path].get) {
                            var operation = spec.paths[path].get;
                            Object.assign(operation, _this.getDefaultSchemaProperties(definition));
                            operation.responses[200] = {
                                schema: schemaDef,
                                description: 'successful operation',
                            };
                        }
                        if (spec.paths[path].delete) {
                            var operation = spec.paths[path].delete;
                            Object.assign(operation, _this.getDefaultSchemaProperties(definition));
                            Object.assign(operation, _this.getDefaultDeleteResponses(definition));
                        }
                        if (spec.paths[path].put) {
                            var operation = spec.paths[path].put;
                            Object.assign(operation, _this.getDefaultSchemaProperties(definition));
                            Object.assign(operation, _this.getDefaultPutResponses(definition, schemaDef));
                            operation.parameters.push(_this.getDefaultParameterSchema(schemaDef, definition));
                        }
                        if (spec.paths[path].patch) {
                            var operation = spec.paths[path].patch;
                            Object.assign(operation, _this.getDefaultSchemaProperties(definition));
                            Object.assign(operation, _this.getDefaultPutResponses(definition, schemaDef));
                            operation.parameters.push(_this.getDefaultParameterSchema(schemaDef, definition));
                        }
                    }
                });
            });
            return spec;
        };
        this.addAuthentication = function (specification, auth) {
            specification.securityDefinitions = {};
            specification.securityDefinitions['ApiKeyAuth'] = auth;
            specification.security = [{ ApiKeyAuth: [] }];
            return specification;
        };
        this.packageJsonPath = packageInfoFilePath;
    }
    SwaggerSpec.prototype.updateSpecFromPackage = function (basePath, specPath) {
        var newInfo = {
            version: '',
            title: '',
        };
        this.packageInfo = JSON.parse(fs_1.default.readFileSync(this.packageJsonPath, 'UTF-8'));
        if (this.packageInfo.name) {
            newInfo.title = this.packageInfo.name;
        }
        if (this.packageInfo.version) {
            newInfo.version = this.packageInfo.version;
        }
        if (this.packageInfo.license) {
            newInfo.license = { name: this.packageInfo.license };
        }
        newInfo.description = "[Specification JSON](" + basePath + specPath + ")";
        if (this.packageInfo.description) {
            newInfo.description += "\n\n" + this.packageInfo.description;
        }
        return newInfo;
    };
    SwaggerSpec.prototype.sortObject = function (o) {
        var sorted = {};
        var key;
        var a = Object.keys(o);
        a.sort();
        for (key = 0; key < a.length; key += 1) {
            sorted[a[key]] = o[a[key]];
        }
        return sorted;
    };
    SwaggerSpec.prototype.initSpec = function (readOnly, basePath, routePath, specPath) {
        var info = this.updateSpecFromPackage(basePath, specPath);
        var specification = {
            swagger: '2.0',
            paths: {},
            info: info,
        };
        specification.swagger = '2.0';
        specification.paths = {};
        var excludedRoutes = [
            routePath + '/:resource/:id/:nested',
            routePath + '/db',
        ];
        var endpoints = listEndpoints(this.app);
        endpoints.forEach(function (endpoint) {
            if (readOnly) {
                for (var i = 0; i < endpoint.methods.length; i += 1) {
                    if (endpoint.methods[i] !== 'GET') {
                        endpoint.methods.splice(i, 1);
                        i -= 1;
                    }
                }
            }
            if (!excludedRoutes.includes(endpoint.path)) {
                var params_1 = new Array();
                var path_1 = endpoint.path;
                var matches = path_1.match(/:([^/]+)/g);
                if (matches) {
                    matches.forEach(function (found) {
                        var paramName = found.substr(1);
                        path_1 = path_1.replace(found, "{" + paramName + "}");
                        params_1.push(paramName);
                    });
                }
                if (!specification.paths[path_1]) {
                    specification.paths[path_1] = {};
                }
                endpoint.methods.forEach(function (m) {
                    specification.paths[path_1][m.toLowerCase()] = {
                        summary: path_1,
                        consumes: ['application/json'],
                        parameters: params_1.map(function (p) { return ({
                            name: p,
                            in: 'path',
                            required: true,
                            type: 'integer',
                        }); }) || [],
                        responses: {},
                    };
                });
            }
        });
        specification.basePath = basePath;
        specification = this.sortObject(lodash_1.default.merge(specification, this.predefinedSpec || {}));
        return specification;
    };
    SwaggerSpec.prototype.setSchemaReference = function (spec, definition) {
        var schemaDef = {};
        if (spec.definitions[definition].type === 'array') {
            schemaDef = { $ref: "#/definitions/" + definition + "/items" };
        }
        else if (spec.definitions[definition].type === 'object') {
            schemaDef = { $ref: "#/definitions/" + definition };
        }
        return schemaDef;
    };
    SwaggerSpec.prototype.getDefaultParameterSchema = function (schemaDef, definition) {
        return {
            schema: schemaDef,
            in: 'body',
            name: 'body',
            description: definition,
            required: true,
        };
    };
    SwaggerSpec.prototype.getQueryParameterSchema = function () {
        return [
            {
                name: '_page',
                in: 'query',
                required: false,
                type: 'integer',
                description: 'parameter to return paginated data',
            },
            {
                name: '_limit',
                in: 'query',
                required: false,
                type: 'integer',
                description: 'parameter to limit paginated data',
            },
            {
                name: '_sort',
                in: 'query',
                required: false,
                type: 'string',
                description: 'sort by attributes',
            },
            {
                name: '_order',
                in: 'query',
                required: false,
                type: 'string',
                description: 'order ascending or descending',
                enum: ['asc', 'desc'],
            },
            {
                name: '_start',
                in: 'query',
                required: false,
                type: 'integer',
                description: 'parameter to set start sliced data',
            },
            {
                name: '_end',
                in: 'query',
                required: false,
                type: 'integer',
                description: 'parameter to set start sliced data',
            },
            {
                name: 'q',
                in: 'query',
                required: false,
                type: 'string',
                description: 'full text search',
            },
            {
                name: '_embed',
                in: 'query',
                required: false,
                type: 'string',
                description: 'include children resources',
            },
            {
                name: '_expand',
                in: 'query',
                required: false,
                type: 'string',
                description: 'include parent resource',
            },
        ];
    };
    SwaggerSpec.prototype.getDefaultPostResponses = function (definition, schemaDef) {
        return {
            responses: {
                201: {
                    description: 'successful operation',
                    schema: schemaDef,
                },
                400: {
                    description: "invalid " + definition,
                },
            },
        };
    };
    SwaggerSpec.prototype.getDefaultPutResponses = function (definition, schemaDef) {
        return {
            responses: {
                200: {
                    description: 'successful operation',
                    schema: schemaDef,
                },
                400: {
                    description: 'invalid ID supplied',
                },
                404: {
                    description: definition + " not found",
                },
                405: {
                    description: 'Validation exception',
                },
            },
        };
    };
    SwaggerSpec.prototype.getDefaultDeleteResponses = function (definition) {
        return {
            responses: {
                200: {
                    description: 'successful operation',
                },
                400: {
                    description: 'invalid ID supplied',
                },
                404: {
                    description: definition + " not found",
                },
            },
        };
    };
    SwaggerSpec.prototype.getDefaultSchemaProperties = function (definition) {
        return {
            produces: ['application/json'],
            tags: [definition],
        };
    };
    return SwaggerSpec;
}());
exports.SwaggerSpec = SwaggerSpec;
