"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireDefault(require("react"));

var _Css = _interopRequireDefault(require("./Css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var instances = 0;

var DropdownMenu = /*#__PURE__*/function (_React$Component) {
  _inherits(DropdownMenu, _React$Component);

  var _super = _createSuper(DropdownMenu);

  function DropdownMenu() {
    var _this;

    _classCallCheck(this, DropdownMenu);

    _this = _super.call(this);
    _this.toggleMenu = _this.toggleMenu.bind(_assertThisInitialized(_this));
    instances += 1;
    _this.MENUITEMS_DIV = '__react_bs_dd_menuItems_' + instances;
    _this.CARAT_CLASS = '__react_bs_dd_carat_' + instances;
    _this.TRIGGER_CLASS = '__react_bs_dd_trigger_' + instances;
    return _this;
  }

  _createClass(DropdownMenu, [{
    key: "toggleMenu",
    value: function toggleMenu(e) {
      var items = document.getElementById(this.MENUITEMS_DIV);

      if (items) {
        items.classList.toggle("show");

        if (this.props.fadeIn && this.props.fadeIn == "true") {
          this.fadeIn(document.getElementById(this.MENUITEMS_DIV));
        }

        this.toggleArrow(e);
      }
    }
  }, {
    key: "toggleArrow",
    value: function toggleArrow(e) {
      var carat = document.getElementById(this.CARAT_CLASS);

      if (carat) {
        if (carat.className === "glyphicon glyphicon-triangle-top") {
          carat.className = "glyphicon glyphicon-triangle-bottom";
        } else {
          carat.className = "glyphicon glyphicon-triangle-top";
        }
      }
    }
  }, {
    key: "fadeIn",
    value: function fadeIn(element) {
      element.style.opacity = 0;

      var tick = function tick() {
        element.style.opacity = +element.style.opacity + 0.04;

        if (+element.style.opacity < 1) {
          window.requestAnimationFrame && requestAnimationFrame(tick) || setTimeout(tick, 16);
        }
      };

      tick();
    }
  }, {
    key: "loggedInUser",
    value: function loggedInUser() {
      if (this.props.userName) {
        var css = this.getCss();
        return /*#__PURE__*/_react["default"].createElement("div", null, /*#__PURE__*/_react["default"].createElement("p", null, "Logged in as: ", /*#__PURE__*/_react["default"].createElement("br", null), /*#__PURE__*/_react["default"].createElement("strong", null, this.props.userName)), /*#__PURE__*/_react["default"].createElement("hr", {
          style: css.separator
        }));
      }
    }
  }, {
    key: "getCss",
    value: function getCss() {
      var propsCss = _objectSpread({}, this.props.css);

      var css = _objectSpread({}, _Css["default"]);

      if (propsCss) {
        Object.keys(propsCss).forEach(function (key) {
          css[key] = _objectSpread(_objectSpread({}, _Css["default"][key]), propsCss[key]);
        });
      }

      return css;
    }
  }, {
    key: "getTrigger",
    value: function getTrigger() {
      var css = this.getCss();

      var iconCss = _objectSpread({}, _Css["default"].gear);

      if (this.props.iconColor) {
        iconCss.color = this.props.iconColor;
      } // Override iconColor if it is present in css prop


      if (this.props.css && this.props.css.gear && this.props.css.gear.color) {
        iconCss.color = this.props.css.gear.color;
      }

      if (this.props.triggerType && this.props.trigger) {
        switch (this.props.triggerType.toLowerCase()) {
          case "image":
            var triggerStyle = css.imageTrigger;
            var caratStyle = css.triangle;

            if (this.props.triggerWidth) {
              triggerStyle.width = this.props.triggerWidth;
            }

            if (this.props.triggerHeight) {
              triggerStyle.height = this.props.triggerHeight;
            }

            if (this.props.caratColor) {
              caratStyle.color = this.props.caratColor;
            }

            return /*#__PURE__*/_react["default"].createElement("div", {
              onClick: this.toggleMenu
            }, /*#__PURE__*/_react["default"].createElement("img", {
              src: this.props.trigger,
              style: triggerStyle,
              className: this.TRIGGER_CLASS
            }), /*#__PURE__*/_react["default"].createElement("span", {
              id: this.CARAT_CLASS,
              className: "glyphicon glyphicon-triangle-bottom",
              style: caratStyle
            }));

          case "text":
            return /*#__PURE__*/_react["default"].createElement("div", {
              className: this.TRIGGER_CLASS,
              onClick: this.toggleMenu,
              style: css.textTrigger
            }, this.props.trigger, "\xA0\xA0", /*#__PURE__*/_react["default"].createElement("span", {
              id: this.CARAT_CLASS,
              className: "glyphicon glyphicon-triangle-bottom",
              style: caratStyle
            }));

          case "icon":
            return /*#__PURE__*/_react["default"].createElement("span", {
              className: this.props.trigger,
              style: iconCss,
              onClick: this.toggleMenu
            });

          default:
            throw "The value for DropdownMenu 'triggerType' is not supported for DropdownMenu. Try 'image', 'text' or 'icon'.";
        }
      } else {
        return /*#__PURE__*/_react["default"].createElement("span", {
          className: "glyphicon glyphicon-cog",
          style: iconCss,
          onClick: this.toggleMenu
        });
      }
    }
  }, {
    key: "getMenuStyle",
    value: function getMenuStyle() {
      var css = this.getCss();
      var menuStyle = JSON.parse(JSON.stringify(css.menuContent)); // Clone the current style

      var position = this.props.position === undefined ? 'right' : this.props.position;
      var supportedPositions = ['left', 'center', 'right'];

      if (supportedPositions.indexOf(position.toLowerCase()) === -1) {
        throw "The value for 'position' prop is not supported for DropdownMenu. Try 'left', 'center' or 'right'.";
      }

      if (position) {
        var baseWidth = parseInt(_Css["default"].menuContent.minWidth.replace('px', ''));
        var offset = 0;
        baseWidth = baseWidth - 40; // We need to use negative numbers as we are offsetting menu to the left

        if (position === "center") {
          offset = baseWidth / 2 * -1;
        }

        if (position === "left") {
          offset = baseWidth * -1;
        }

        menuStyle.left = offset.toString() + 'px';
      }

      return menuStyle;
    }
  }, {
    key: "getChildren",
    value: function getChildren() {
      var _this2 = this;

      return _react["default"].Children.map(this.props.children, function (child) {
        return /*#__PURE__*/_react["default"].cloneElement(child, {
          css: _this2.props.css
        }, null);
      });
    }
  }, {
    key: "UNSAFE_componentWillMount",
    value: function UNSAFE_componentWillMount() {
      var TRIGGER_CLASS = this.TRIGGER_CLASS;
      var MENUITEMS_DIV = this.MENUITEMS_DIV;
      var CARAT_CLASS = this.CARAT_CLASS;
      window.addEventListener("click", function (e) {
        var klass = e.target.className;
        var carat = document.getElementById(CARAT_CLASS);
        var menuItemDiv = document.getElementById(MENUITEMS_DIV);

        if (menuItemDiv && menuItemDiv.dataset.reactbsdditems === MENUITEMS_DIV) {
          if (klass !== MENUITEMS_DIV + " show" && klass !== TRIGGER_CLASS && !klass.lastIndexOf("glyphicon", 0) == 0) {
            menuItemDiv.classList.remove('show');

            if (carat) {
              carat.className = "glyphicon glyphicon-triangle-bottom";
            }
          }
        }
      });
    }
  }, {
    key: "render",
    value: function render() {
      if (this.props.children.length === 0) {
        throw "DropdownMenu must have at least one MenuItem child.";
      }

      return /*#__PURE__*/_react["default"].createElement("div", {
        style: _Css["default"].menu,
        onMouseOver: this.props.onMouseover,
        onMouseOut: this.props.onMouseout
      }, this.getTrigger(), /*#__PURE__*/_react["default"].createElement("div", {
        "data-reactbsdditems": this.MENUITEMS_DIV,
        id: this.MENUITEMS_DIV,
        className: this.MENUITEMS_DIV,
        style: this.getMenuStyle()
      }, this.loggedInUser(), this.getChildren()));
    }
  }]);

  return DropdownMenu;
}(_react["default"].Component);

;
var _default = DropdownMenu;
exports["default"] = _default;