{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\carlo\\\\OneDrive\\\\Desktop\\\\simulink-tool\\\\SampleSLProject\\\\src\\\\controllers\\\\HomeController.js\";\nimport React, { useState } from \"react\";\nimport ProjectList from \"../views/ProjectList\";\nimport { useQuery } from \"react-query\"; //Hosts the lists of projects matching search word\n\nconst Home = props => {\n  const [data, setData] = useState([]);\n  const [isLoading, setLoading] = useState(false);\n  const word = props.string;\n  const database = props.string2;\n  const pageLimit = 10;\n\n  const fetchProjects = async function () {\n    let page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    const res = await fetch(`http://localhost:8000/items?q=math&_page=${page}&_limit=${pageLimit}`);\n    return res.json();\n  }; //data is the returned res.json() from fetchProjects()\n  //status is the status of the function\n\n\n  function Projects() {\n    const [page, setPage] = useState(1);\n    const {\n      data,\n      status\n    } = useQuery([\"paginatedProjects\", page], () => fetchProjects(page), {\n      keepPreviousData: false\n    });\n    setData(data);\n  } //Projects();\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"home\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }\n  }, isLoading && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 21\n    }\n  }, \"Loading...\"), /*#__PURE__*/React.createElement(ProjectList, {\n    items: data,\n    repository: database,\n    word: word,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default Home;","map":{"version":3,"sources":["C:/Users/carlo/OneDrive/Desktop/simulink-tool/SampleSLProject/src/controllers/HomeController.js"],"names":["React","useState","ProjectList","useQuery","Home","props","data","setData","isLoading","setLoading","word","string","database","string2","pageLimit","fetchProjects","page","res","fetch","json","Projects","setPage","status","keepPreviousData"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,WAAP,MAAwB,sBAAxB;AACA,SAASC,QAAT,QAAyB,aAAzB,C,CACA;;AACA,MAAMC,IAAI,GAAIC,KAAD,IAAW;AACtB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACO,SAAD,EAAYC,UAAZ,IAA0BR,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAMS,IAAI,GAAGL,KAAK,CAACM,MAAnB;AACA,QAAMC,QAAQ,GAAGP,KAAK,CAACQ,OAAvB;AACA,QAAMC,SAAS,GAAG,EAAlB;;AAEA,QAAMC,aAAa,GAAG,kBAAoB;AAAA,QAAbC,IAAa,uEAAN,CAAM;AACxC,UAAMC,GAAG,GAAG,MAAMC,KAAK,CACpB,4CAA2CF,IAAK,WAAUF,SAAU,EADhD,CAAvB;AAGA,WAAOG,GAAG,CAACE,IAAJ,EAAP;AACD,GALD,CAPsB,CAatB;AACA;;;AAEA,WAASC,QAAT,GAAoB;AAClB,UAAM,CAACJ,IAAD,EAAOK,OAAP,IAAkBpB,QAAQ,CAAC,CAAD,CAAhC;AACA,UAAM;AAAEK,MAAAA,IAAF;AAAQgB,MAAAA;AAAR,QAAmBnB,QAAQ,CAAC,CAAC,mBAAD,EAAsBa,IAAtB,CAAD,EAA8B,MAAMD,aAAa,CAACC,IAAD,CAAjD,EAAwD;AACvFO,MAAAA,gBAAgB,EAAE;AADqE,KAAxD,CAAjC;AAGAhB,IAAAA,OAAO,CAACD,IAAD,CAAP;AACD,GAtBqB,CAuBtB;;;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGE,SAAS,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADhB,eAGE,oBAAC,WAAD;AAAa,IAAA,KAAK,EAAEF,IAApB;AAA0B,IAAA,UAAU,EAAEM,QAAtC;AAAgD,IAAA,IAAI,EAAEF,IAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CADF;AAOD,CAhCD;;AAkCA,eAAeN,IAAf","sourcesContent":["import React, { useState } from \"react\";\r\nimport ProjectList from \"../views/ProjectList\";\r\nimport { useQuery } from \"react-query\";\r\n//Hosts the lists of projects matching search word\r\nconst Home = (props) => {\r\n  const [data, setData] = useState([]);\r\n  const [isLoading, setLoading] = useState(false);\r\n  const word = props.string;\r\n  const database = props.string2;\r\n  const pageLimit = 10;\r\n\r\n  const fetchProjects = async (page = 1) => {\r\n    const res = await fetch(\r\n      `http://localhost:8000/items?q=math&_page=${page}&_limit=${pageLimit}`\r\n    );\r\n    return res.json();\r\n  };\r\n  //data is the returned res.json() from fetchProjects()\r\n  //status is the status of the function\r\n\r\n  function Projects() {\r\n    const [page, setPage] = useState(1);\r\n    const { data, status } = useQuery([\"paginatedProjects\", page], () => fetchProjects(page),{\r\n      keepPreviousData: false\r\n    });\r\n    setData(data);\r\n  }\r\n  //Projects();\r\n \r\n  return (\r\n    <div className=\"home\">\r\n      {isLoading && <div>Loading...</div>}\r\n\r\n      <ProjectList items={data} repository={database} word={word} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n"]},"metadata":{},"sourceType":"module"}