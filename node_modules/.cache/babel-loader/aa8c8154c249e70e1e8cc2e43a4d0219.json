{"ast":null,"code":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"react-query\";\n\nconst useFetch = (repository, word) => {\n  const [datas, setItems] = useState([]);\n  const [isLoading, setLoading] = useState(false);\n  const pageLimit = 10;\n  const pageLimitAll = 5; //fetching filtered data for GitHub projects\n\n  const fetchGitHubProjects = async function () {\n    let page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    const res = await fetch(`http://localhost:8000/items?q=math&_page=${page}&_limit=${pageLimit}`);\n    return res.json();\n  };\n\n  function GitHubProjects() {\n    const [page, setPage] = useState(1);\n    const {\n      data,\n      status\n    } = useQuery([\"paginatedProjects\", page], () => fetchGitHubProjects(page), {\n      keepPreviousData: true\n    });\n    console.log(data);\n    setItems(data);\n  } //fetching filtered data for MATC projects\n\n\n  const fetchMATCProjects = async function () {\n    let page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    const res = await fetch(`http://localhost:5000/items2?q=math&_page=${page}&_limit=${pageLimit}`);\n    return res.json();\n  };\n\n  function MATCProjects() {\n    const [page, setPage] = useState(1);\n    const {\n      data,\n      status\n    } = useQuery([\"paginatedProjects\", page], () => fetchMATCProjects(page), {\n      keepPreviousData: true\n    });\n    console.log(data);\n    setItems(data);\n  } //fetching filtered data for MATC projects\n\n\n  const fetchAllProjects = async function () {\n    let page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    const res1 = await fetch(`http://localhost:5000/items2?q=math&_page=${page}&_limit=${pageLimitAll}`);\n    const res2 = await fetch(`http://localhost:8000/items?q=math&_page=${page}&_limit=${pageLimitAll}`);\n    var res = [...res1, ...res2];\n    return res.json();\n  };\n\n  function AllProjects() {\n    const [page, setPage] = useState(1);\n    const {\n      data,\n      status\n    } = useQuery([\"paginatedProjects\", page], () => fetchAllProjects(page), {\n      keepPreviousData: true\n    });\n    console.log(data);\n    setItems(data);\n  } //will execute function when data is updated\n\n\n  useEffect(() => {\n    console.log(repository);\n    console.log(word);\n    setLoading(false);\n\n    if (repository === \"GitHub\") {\n      setLoading(true);\n      GitHubProjects();\n      setLoading(false);\n    } else if (repository === \"MATC\") {\n      MATCProjects();\n      setLoading(false);\n    } else if (repository === \"All\") {\n      try {\n        //both json arrays are merged here\n        AllProjects();\n      } catch (e) {\n        console.error(e);\n      } finally {\n        setLoading(false);\n      }\n    } else if (repository === \"TYPE\") {\n      alert(\"Select repository type to begin search...\");\n    }\n  }, [word, repository]);\n  return {\n    datas,\n    isLoading\n  };\n};\n\nexport default useFetch;","map":{"version":3,"sources":["C:/Users/carlo/OneDrive/Desktop/simulink-tool/SampleSLProject/src/controllers/useFetch.js"],"names":["useState","useEffect","useQuery","useFetch","repository","word","datas","setItems","isLoading","setLoading","pageLimit","pageLimitAll","fetchGitHubProjects","page","res","fetch","json","GitHubProjects","setPage","data","status","keepPreviousData","console","log","fetchMATCProjects","MATCProjects","fetchAllProjects","res1","res2","AllProjects","e","error","alert"],"mappings":"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","sourcesContent":["import { useState,useEffect } from \"react\";\r\nimport { useQuery } from \"react-query\";\r\n\r\nconst useFetch = (repository, word) => {\r\n\r\n  const [datas, setItems] = useState([]);\r\n  const [isLoading, setLoading] = useState(false);\r\n\r\n  const pageLimit = 10;\r\n  const pageLimitAll = 5;\r\n\r\n  //fetching filtered data for GitHub projects\r\n  const fetchGitHubProjects = async (page = 1) => {\r\n    const res = await fetch(\r\n      `http://localhost:8000/items?q=math&_page=${page}&_limit=${pageLimit}`\r\n    );\r\n    return res.json();\r\n  };\r\n\r\n  function GitHubProjects() {\r\n    const [page, setPage] = useState(1);\r\n    const { data, status } = useQuery([\"paginatedProjects\", page], () => fetchGitHubProjects(page),{\r\n      keepPreviousData: true\r\n    });\r\n    console.log(data);\r\n    setItems(data);\r\n  }\r\n\r\n  //fetching filtered data for MATC projects\r\n  const fetchMATCProjects = async (page = 1) => {\r\n    const res = await fetch(\r\n      `http://localhost:5000/items2?q=math&_page=${page}&_limit=${pageLimit}`\r\n    );\r\n    return res.json();\r\n  };\r\n\r\n  function MATCProjects() {\r\n    const [page, setPage] = useState(1);\r\n    const { data, status } = useQuery([\"paginatedProjects\", page], () => fetchMATCProjects(page),{\r\n      keepPreviousData: true\r\n    });\r\n    console.log(data);\r\n    setItems(data);\r\n  }\r\n\r\n  //fetching filtered data for MATC projects\r\n  const fetchAllProjects = async (page = 1) => {\r\n    const res1 = await fetch(\r\n      `http://localhost:5000/items2?q=math&_page=${page}&_limit=${pageLimitAll}`\r\n    );\r\n    const res2 = await fetch(\r\n      `http://localhost:8000/items?q=math&_page=${page}&_limit=${pageLimitAll}`\r\n    );\r\n    var res = [...res1, ...res2];\r\n    return res.json();\r\n  };\r\n\r\n  function AllProjects() {\r\n    const [page, setPage] = useState(1);\r\n    const { data, status } = useQuery([\"paginatedProjects\", page], () => fetchAllProjects(page),{\r\n      keepPreviousData: true\r\n    });\r\n    console.log(data);\r\n    setItems(data);\r\n  }\r\n  \r\n  //will execute function when data is updated\r\n  useEffect(() => {\r\n    console.log(repository);\r\n    console.log(word);\r\n    setLoading(false);\r\n    if (repository === \"GitHub\") \r\n    {\r\n      setLoading(true);\r\n      GitHubProjects();\r\n      setLoading(false);\r\n    } \r\n    else if (repository === \"MATC\") \r\n    {\r\n      MATCProjects();\r\n      setLoading(false);\r\n    } else if (repository === \"All\") {\r\n      try {\r\n        //both json arrays are merged here\r\n        AllProjects();\r\n      } catch (e) {\r\n        console.error(e);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    } else if (repository === \"TYPE\") {\r\n      alert(\"Select repository type to begin search...\");\r\n    }\r\n  }, [word, repository]);\r\n\r\n  return { datas, isLoading };\r\n};\r\n\r\nexport default useFetch;\r\n"]},"metadata":{},"sourceType":"module"}