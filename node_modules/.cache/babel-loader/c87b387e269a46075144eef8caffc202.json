{"ast":null,"code":"import { useState } from \"react\";\nimport { useEffect } from \"react\";\n\nconst useFetch = (repository, word) => {\n  const [datas, setItems] = useState([]);\n  const [isLoading, setLoading] = useState(false);\n  const url = \"http://localhost:5000/items\";\n  const url2 = \"http://localhost:8000/items2\"; //will execute function when data is updated\n\n  useEffect(async () => {\n    console.log(repository);\n    setLoading(false);\n\n    if (repository === \"GitHub\") {\n      setLoading(true);\n      const response = await fetch(url, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\"\n        }\n      });\n      const data = await response.json();\n      setItems(data);\n      setLoading(false);\n    } else if (repository === \"MATC\") {\n      setLoading(true);\n      const response = await fetch(url2, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\"\n        }\n      });\n      const data = await response.json();\n      setItems(data);\n      setLoading(false);\n    } else if (repository === \"All\") {\n      try {\n        //both json arrays are merged here\n        var res1 = await fetch(url);\n        var data1 = await res1.json();\n        var res2 = await fetch(url2);\n        var data2 = await res2.json();\n        var res = [...data1, ...data2];\n        setItems(res);\n      } catch (e) {\n        console.error(e);\n      } finally {//setLoading(false)\n      }\n    } else if (repository === \"TYPE\") {\n      alert(\"Select repository type to begin search...\");\n    }\n  }, [word, repository]);\n  return {\n    datas,\n    isLoading\n  };\n};\n\nexport default useFetch;","map":{"version":3,"sources":["C:/Users/carlo/OneDrive/Desktop/simulink-tool/SampleSLProject/src/controllers/useFetch.js"],"names":["useState","useEffect","useFetch","repository","word","datas","setItems","isLoading","setLoading","url","url2","console","log","response","fetch","headers","Accept","data","json","res1","data1","res2","data2","res","e","error","alert"],"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,SAAT,QAA0B,OAA1B;;AAEA,MAAMC,QAAQ,GAAG,CAACC,UAAD,EAAaC,IAAb,KAAsB;AACrC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACO,SAAD,EAAYC,UAAZ,IAA0BR,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAMS,GAAG,GAAG,6BAAZ;AACA,QAAMC,IAAI,GAAG,8BAAb,CAJqC,CAMrC;;AACAT,EAAAA,SAAS,CAAC,YAAY;AACpBU,IAAAA,OAAO,CAACC,GAAR,CAAYT,UAAZ;AACAK,IAAAA,UAAU,CAAC,KAAD,CAAV;;AACA,QAAIL,UAAU,KAAK,QAAnB,EAA6B;AAC3BK,MAAAA,UAAU,CAAC,IAAD,CAAV;AAEA,YAAMK,QAAQ,GAAG,MAAMC,KAAK,CAACL,GAAD,EAAM;AAChCM,QAAAA,OAAO,EAAE;AACP,0BAAgB,kBADT;AAEPC,UAAAA,MAAM,EAAE;AAFD;AADuB,OAAN,CAA5B;AAOA,YAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnB;AACAZ,MAAAA,QAAQ,CAACW,IAAD,CAAR;AACAT,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAbD,MAaO,IAAIL,UAAU,KAAK,MAAnB,EAA2B;AAChCK,MAAAA,UAAU,CAAC,IAAD,CAAV;AACA,YAAMK,QAAQ,GAAG,MAAMC,KAAK,CAACJ,IAAD,EAAO;AACjCK,QAAAA,OAAO,EAAE;AACP,0BAAgB,kBADT;AAEPC,UAAAA,MAAM,EAAE;AAFD;AADwB,OAAP,CAA5B;AAOA,YAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnB;AACAZ,MAAAA,QAAQ,CAACW,IAAD,CAAR;AACAT,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAZM,MAYA,IAAIL,UAAU,KAAK,KAAnB,EAA0B;AAC/B,UAAI;AACF;AACA,YAAIgB,IAAI,GAAG,MAAML,KAAK,CAACL,GAAD,CAAtB;AACA,YAAIW,KAAK,GAAG,MAAMD,IAAI,CAACD,IAAL,EAAlB;AACA,YAAIG,IAAI,GAAG,MAAMP,KAAK,CAACJ,IAAD,CAAtB;AACA,YAAIY,KAAK,GAAG,MAAMD,IAAI,CAACH,IAAL,EAAlB;AACA,YAAIK,GAAG,GAAG,CAAC,GAAGH,KAAJ,EAAW,GAAGE,KAAd,CAAV;AACAhB,QAAAA,QAAQ,CAACiB,GAAD,CAAR;AACD,OARD,CAQE,OAAOC,CAAP,EAAU;AACVb,QAAAA,OAAO,CAACc,KAAR,CAAcD,CAAd;AACD,OAVD,SAUU,CACR;AACD;AACF,KAdM,MAcA,IAAIrB,UAAU,KAAK,MAAnB,EAA2B;AAChCuB,MAAAA,KAAK,CAAC,2CAAD,CAAL;AACD;AACF,GA7CQ,EA6CN,CAACtB,IAAD,EAAOD,UAAP,CA7CM,CAAT;AA+CA,SAAO;AAAEE,IAAAA,KAAF;AAASE,IAAAA;AAAT,GAAP;AACD,CAvDD;;AAyDA,eAAeL,QAAf","sourcesContent":["import { useState } from \"react\";\r\nimport { useEffect } from \"react\";\r\n\r\nconst useFetch = (repository, word) => {\r\n  const [datas, setItems] = useState([]);\r\n  const [isLoading, setLoading] = useState(false);\r\n  const url = \"http://localhost:5000/items\";\r\n  const url2 = \"http://localhost:8000/items2\";\r\n\r\n  //will execute function when data is updated\r\n  useEffect(async () => {\r\n    console.log(repository);\r\n    setLoading(false);\r\n    if (repository === \"GitHub\") {\r\n      setLoading(true);\r\n\r\n      const response = await fetch(url, {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Accept: \"application/json\",\r\n        },\r\n      });\r\n\r\n      const data = await response.json();\r\n      setItems(data);\r\n      setLoading(false);\r\n    } else if (repository === \"MATC\") {\r\n      setLoading(true);\r\n      const response = await fetch(url2, {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Accept: \"application/json\",\r\n        },\r\n      });\r\n\r\n      const data = await response.json();\r\n      setItems(data);\r\n      setLoading(false);\r\n    } else if (repository === \"All\") {\r\n      try {\r\n        //both json arrays are merged here\r\n        var res1 = await fetch(url);\r\n        var data1 = await res1.json();\r\n        var res2 = await fetch(url2);\r\n        var data2 = await res2.json();\r\n        var res = [...data1, ...data2];\r\n        setItems(res);\r\n      } catch (e) {\r\n        console.error(e);\r\n      } finally {\r\n        //setLoading(false)\r\n      }\r\n    } else if (repository === \"TYPE\") {\r\n      alert(\"Select repository type to begin search...\");\r\n    }\r\n  }, [word, repository]);\r\n\r\n  return { datas, isLoading };\r\n};\r\n\r\nexport default useFetch;\r\n"]},"metadata":{},"sourceType":"module"}