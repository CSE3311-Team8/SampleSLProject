{"ast":null,"code":"import { useState } from \"react\";\nimport { useEffect } from \"react\";\n\nconst useFetch = (repository, word) => {\n  const pageLimit = 40;\n  const pageLimitAll = 40;\n  const [page, setPage] = useState(1);\n  const [datas, setItems] = useState([]);\n  const [isLoading, setLoading] = useState(false);\n  const url = `https://sampleslproject-storage-53775c4755905-staging.s3.amazonaws.com/GitHub_Projects.json/items?q=${word}&_page=${page}&_limit=${pageLimit}`;\n  const url2 = `http://localhost:5000/items2?q=${word}&_page=${page}&_limit=${pageLimit}`; //will execute function when data is updated\n\n  useEffect(async () => {\n    //console.log(repository);\n    setLoading(false);\n\n    if (repository === 'GitHub') {\n      setLoading(true);\n      const response = await fetch(url, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\"\n        }\n      });\n      console.log(response);\n      const data = await response.json();\n      setItems(data);\n      setLoading(false);\n    } else if (repository === 'MATC') {\n      setLoading(true);\n      const response = await fetch(url2, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\"\n        }\n      });\n      const data = await response.json();\n      setItems(data);\n      setLoading(false);\n    } else if (repository === 'All') {\n      try {\n        //both json arrays are merged here\n        var res1 = await fetch(`http://localhost:8000/items?q=${word}&_page=${page}&_limit=${pageLimitAll}`);\n        var data1 = await res1.json();\n        var res2 = await fetch(`http://localhost:5000/items2?q=${word}&_page=${page}&_limit=${pageLimitAll}`);\n        var data2 = await res2.json();\n        var res = [...data1, ...data2];\n        setItems(res);\n      } catch (e) {\n        console.error(e);\n      } finally {//setLoading(false)\n      }\n    } else if (repository === 'TYPE') {\n      alert('Select repository type to begin search...');\n    }\n  }, [word, repository]);\n  return {\n    datas,\n    isLoading\n  };\n};\n\nexport default useFetch;","map":{"version":3,"sources":["C:/Users/carlo/OneDrive/Desktop/simulink-tool/SampleSLProject/src/controllers/useFetch.js"],"names":["useState","useEffect","useFetch","repository","word","pageLimit","pageLimitAll","page","setPage","datas","setItems","isLoading","setLoading","url","url2","response","fetch","headers","Accept","console","log","data","json","res1","data1","res2","data2","res","e","error","alert"],"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,SAAT,QAA0B,OAA1B;;AAEA,MAAMC,QAAQ,GAAG,CAACC,UAAD,EAAaC,IAAb,KAAqB;AACpC,QAAMC,SAAS,GAAG,EAAlB;AACA,QAAMC,YAAY,GAAG,EAArB;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACW,SAAD,EAAYC,UAAZ,IAA0BZ,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAMa,GAAG,GAAI,uGAAsGT,IAAK,UAASG,IAAK,WAAUF,SAAU,EAA1J;AACA,QAAMS,IAAI,GAAI,kCAAiCV,IAAK,UAASG,IAAK,WAAUF,SAAU,EAAtF,CAPoC,CASpC;;AACAJ,EAAAA,SAAS,CAAC,YAAW;AACnB;AACAW,IAAAA,UAAU,CAAC,KAAD,CAAV;;AACA,QAAGT,UAAU,KAAK,QAAlB,EACA;AACES,MAAAA,UAAU,CAAC,IAAD,CAAV;AAEA,YAAMG,QAAQ,GAAG,MAAMC,KAAK,CAACH,GAAD,EAAK;AAE/BI,QAAAA,OAAO,EAAE;AACP,0BAAgB,kBADT;AAEPC,UAAAA,MAAM,EAAE;AAFD;AAFsB,OAAL,CAA5B;AAOAC,MAAAA,OAAO,CAACC,GAAR,CAAYL,QAAZ;AAEA,YAAMM,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAT,EAAnB;AACAZ,MAAAA,QAAQ,CAACW,IAAD,CAAR;AACAT,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAhBD,MAiBK,IAAGT,UAAU,KAAK,MAAlB,EACL;AACES,MAAAA,UAAU,CAAC,IAAD,CAAV;AACA,YAAMG,QAAQ,GAAG,MAAMC,KAAK,CAACF,IAAD,EAAM;AAChCG,QAAAA,OAAO,EAAE;AACP,0BAAgB,kBADT;AAEPC,UAAAA,MAAM,EAAE;AAFD;AADuB,OAAN,CAA5B;AAOA,YAAMG,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAT,EAAnB;AACAZ,MAAAA,QAAQ,CAACW,IAAD,CAAR;AACAT,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAbI,MAcA,IAAIT,UAAU,KAAK,KAAnB,EACL;AACE,UAAG;AAAC;AACF,YAAIoB,IAAI,GAAG,MAAMP,KAAK,CAAE,iCAAgCZ,IAAK,UAASG,IAAK,WAAUD,YAAa,EAA5E,CAAtB;AACA,YAAIkB,KAAK,GAAG,MAAMD,IAAI,CAACD,IAAL,EAAlB;AACA,YAAIG,IAAI,GAAG,MAAMT,KAAK,CAAE,kCAAiCZ,IAAK,UAASG,IAAK,WAAUD,YAAa,EAA7E,CAAtB;AACA,YAAIoB,KAAK,GAAG,MAAMD,IAAI,CAACH,IAAL,EAAlB;AACA,YAAIK,GAAG,GAAG,CAAC,GAAGH,KAAJ,EAAU,GAAGE,KAAb,CAAV;AACAhB,QAAAA,QAAQ,CAACiB,GAAD,CAAR;AACD,OAPD,CAOC,OAAMC,CAAN,EAAQ;AACLT,QAAAA,OAAO,CAACU,KAAR,CAAcD,CAAd;AACH,OATD,SASQ,CACN;AACD;AACF,KAdI,MAcC,IAAGzB,UAAU,KAAK,MAAlB,EACN;AACE2B,MAAAA,KAAK,CAAC,2CAAD,CAAL;AACD;AACF,GApDQ,EAoDN,CAAC1B,IAAD,EAAOD,UAAP,CApDM,CAAT;AAuDA,SAAM;AAACM,IAAAA,KAAD;AAAQE,IAAAA;AAAR,GAAN;AAED,CAnED;;AAsEA,eAAeT,QAAf","sourcesContent":["import { useState } from \"react\";\r\nimport { useEffect } from \"react\";\r\n\r\nconst useFetch = (repository, word) =>{\r\n  const pageLimit = 40;\r\n  const pageLimitAll = 40;\r\n  const [page, setPage] = useState(1);\r\n  const [datas, setItems] = useState([]);\r\n  const [isLoading, setLoading] = useState(false);\r\n  const url = `https://sampleslproject-storage-53775c4755905-staging.s3.amazonaws.com/GitHub_Projects.json/items?q=${word}&_page=${page}&_limit=${pageLimit}`;\r\n  const url2 = `http://localhost:5000/items2?q=${word}&_page=${page}&_limit=${pageLimit}`;\r\n  \r\n  //will execute function when data is updated\r\n  useEffect(async() => {\r\n    //console.log(repository);\r\n    setLoading(false);\r\n    if(repository === 'GitHub')\r\n    {\r\n      setLoading(true);\r\n\r\n      const response = await fetch(url,{\r\n\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Accept: \"application/json\"\r\n        }\r\n      });\r\n      console.log(response);\r\n      \r\n      const data = await response.json();\r\n      setItems(data);\r\n      setLoading(false);\r\n    }\r\n    else if(repository === 'MATC')\r\n    {\r\n      setLoading(true);\r\n      const response = await fetch(url2,{\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Accept: \"application/json\"\r\n        }\r\n      });\r\n      \r\n      const data = await response.json();\r\n      setItems(data);\r\n      setLoading(false);\r\n    }\r\n    else if (repository === 'All')\r\n    {\r\n      try{//both json arrays are merged here\r\n        var res1 = await fetch(`http://localhost:8000/items?q=${word}&_page=${page}&_limit=${pageLimitAll}`);\r\n        var data1 = await res1.json();\r\n        var res2 = await fetch(`http://localhost:5000/items2?q=${word}&_page=${page}&_limit=${pageLimitAll}`);\r\n        var data2 = await res2.json();\r\n        var res = [...data1,...data2];\r\n        setItems(res);\r\n      }catch(e){\r\n          console.error(e)\r\n      }finally{\r\n        //setLoading(false)\r\n      }\r\n    }else if(repository === 'TYPE') \r\n    {\r\n      alert('Select repository type to begin search...');\r\n    }\r\n  }, [word, repository]);\r\n  \r\n  \r\n  return{datas, isLoading}\r\n\r\n}\r\n  \r\n\r\nexport default useFetch;"]},"metadata":{},"sourceType":"module"}