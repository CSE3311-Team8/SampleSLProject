{"ast":null,"code":"import { useState } from \"react\";\nimport { useEffect } from \"react\";\nimport { useQuery } from \"react-query\";\n\nconst useFetch = (repository, word) => {\n  const fetchProjects = async () => {\n    const res = await fetch('http://localhost:8000/items');\n    return res.json();\n  }; //data is the returned res.json() from fetchProjects()\n  //status is the status of the function\n\n\n  const {\n    data,\n    status\n  } = useQuery('projects', fetchProjects);\n  console.log(data);\n  const [datas, setItems] = useState([]);\n  const [isLoading, setLoading] = useState(false);\n  const url = \"http://localhost:8000/items\";\n  const url2 = \"http://localhost:5000/items2\"; //will execute function when data is updated\n\n  useEffect(async () => {\n    console.log(repository);\n    setLoading(false);\n\n    if (repository === \"GitHub\") {\n      setLoading(true);\n      const response = await fetch(url, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\"\n        }\n      });\n      const data = await response.json();\n      setItems(data);\n      setLoading(false);\n    } else if (repository === \"MATC\") {\n      setLoading(true);\n      const response = await fetch(url2, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\"\n        }\n      });\n      const data = await response.json();\n      setItems(data);\n      setLoading(false);\n    } else if (repository === \"All\") {\n      try {\n        //both json arrays are merged here\n        var res1 = await fetch(url);\n        var data1 = await res1.json();\n        var res2 = await fetch(url2);\n        var data2 = await res2.json();\n        var res = [...data1, ...data2];\n        setItems(res);\n      } catch (e) {\n        console.error(e);\n      } finally {//setLoading(false)\n      }\n    } else if (repository === \"TYPE\") {\n      alert(\"Select repository type to begin search...\");\n    }\n  }, [word, repository]);\n  return {\n    datas,\n    isLoading\n  };\n};\n\nexport default useFetch;","map":{"version":3,"sources":["C:/Users/carlo/OneDrive/Desktop/simulink-tool/SampleSLProject/src/controllers/useFetch.js"],"names":["useState","useEffect","useQuery","useFetch","repository","word","fetchProjects","res","fetch","json","data","status","console","log","datas","setItems","isLoading","setLoading","url","url2","response","headers","Accept","res1","data1","res2","data2","e","error","alert"],"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,QAAT,QAAyB,aAAzB;;AAEA,MAAMC,QAAQ,GAAG,CAACC,UAAD,EAAaC,IAAb,KAAsB;AAErC,QAAMC,aAAa,GAAG,YAAY;AAEhC,UAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,6BAAD,CAAvB;AACA,WAAOD,GAAG,CAACE,IAAJ,EAAP;AACD,GAJD,CAFqC,CAOrC;AACA;;;AACA,QAAM;AAACC,IAAAA,IAAD;AAAOC,IAAAA;AAAP,MAAiBT,QAAQ,CAAC,UAAD,EAAaI,aAAb,CAA/B;AACAM,EAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACA,QAAM,CAACI,KAAD,EAAQC,QAAR,IAAoBf,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACgB,SAAD,EAAYC,UAAZ,IAA0BjB,QAAQ,CAAC,KAAD,CAAxC;AAEA,QAAMkB,GAAG,GAAG,6BAAZ;AACA,QAAMC,IAAI,GAAG,8BAAb,CAfqC,CAiBrC;;AACAlB,EAAAA,SAAS,CAAC,YAAY;AACpBW,IAAAA,OAAO,CAACC,GAAR,CAAYT,UAAZ;AACAa,IAAAA,UAAU,CAAC,KAAD,CAAV;;AACA,QAAIb,UAAU,KAAK,QAAnB,EAA6B;AAC3Ba,MAAAA,UAAU,CAAC,IAAD,CAAV;AAEA,YAAMG,QAAQ,GAAG,MAAMZ,KAAK,CAACU,GAAD,EAAM;AAChCG,QAAAA,OAAO,EAAE;AACP,0BAAgB,kBADT;AAEPC,UAAAA,MAAM,EAAE;AAFD;AADuB,OAAN,CAA5B;AAOA,YAAMZ,IAAI,GAAG,MAAMU,QAAQ,CAACX,IAAT,EAAnB;AACAM,MAAAA,QAAQ,CAACL,IAAD,CAAR;AACAO,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAbD,MAaO,IAAIb,UAAU,KAAK,MAAnB,EAA2B;AAChCa,MAAAA,UAAU,CAAC,IAAD,CAAV;AACA,YAAMG,QAAQ,GAAG,MAAMZ,KAAK,CAACW,IAAD,EAAO;AACjCE,QAAAA,OAAO,EAAE;AACP,0BAAgB,kBADT;AAEPC,UAAAA,MAAM,EAAE;AAFD;AADwB,OAAP,CAA5B;AAOA,YAAMZ,IAAI,GAAG,MAAMU,QAAQ,CAACX,IAAT,EAAnB;AACAM,MAAAA,QAAQ,CAACL,IAAD,CAAR;AACAO,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAZM,MAYA,IAAIb,UAAU,KAAK,KAAnB,EAA0B;AAC/B,UAAI;AACF;AACA,YAAImB,IAAI,GAAG,MAAMf,KAAK,CAACU,GAAD,CAAtB;AACA,YAAIM,KAAK,GAAG,MAAMD,IAAI,CAACd,IAAL,EAAlB;AACA,YAAIgB,IAAI,GAAG,MAAMjB,KAAK,CAACW,IAAD,CAAtB;AACA,YAAIO,KAAK,GAAG,MAAMD,IAAI,CAAChB,IAAL,EAAlB;AACA,YAAIF,GAAG,GAAG,CAAC,GAAGiB,KAAJ,EAAW,GAAGE,KAAd,CAAV;AACAX,QAAAA,QAAQ,CAACR,GAAD,CAAR;AACD,OARD,CAQE,OAAOoB,CAAP,EAAU;AACVf,QAAAA,OAAO,CAACgB,KAAR,CAAcD,CAAd;AACD,OAVD,SAUU,CACR;AACD;AACF,KAdM,MAcA,IAAIvB,UAAU,KAAK,MAAnB,EAA2B;AAChCyB,MAAAA,KAAK,CAAC,2CAAD,CAAL;AACD;AACF,GA7CQ,EA6CN,CAACxB,IAAD,EAAOD,UAAP,CA7CM,CAAT;AA+CA,SAAO;AAAEU,IAAAA,KAAF;AAASE,IAAAA;AAAT,GAAP;AACD,CAlED;;AAoEA,eAAeb,QAAf","sourcesContent":["import { useState } from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport { useQuery } from \"react-query\";\r\n\r\nconst useFetch = (repository, word) => {\r\n\r\n  const fetchProjects = async () => {\r\n\r\n    const res = await fetch('http://localhost:8000/items');\r\n    return res.json();\r\n  }\r\n  //data is the returned res.json() from fetchProjects()\r\n  //status is the status of the function\r\n  const {data, status} = useQuery('projects', fetchProjects);\r\n  console.log(data);\r\n  const [datas, setItems] = useState([]);\r\n  const [isLoading, setLoading] = useState(false);\r\n  \r\n  const url = \"http://localhost:8000/items\";\r\n  const url2 = \"http://localhost:5000/items2\";\r\n\r\n  //will execute function when data is updated\r\n  useEffect(async () => {\r\n    console.log(repository);\r\n    setLoading(false);\r\n    if (repository === \"GitHub\") {\r\n      setLoading(true);\r\n\r\n      const response = await fetch(url, {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Accept: \"application/json\",\r\n        },\r\n      });\r\n\r\n      const data = await response.json();\r\n      setItems(data);\r\n      setLoading(false);\r\n    } else if (repository === \"MATC\") {\r\n      setLoading(true);\r\n      const response = await fetch(url2, {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Accept: \"application/json\",\r\n        },\r\n      });\r\n\r\n      const data = await response.json();\r\n      setItems(data);\r\n      setLoading(false);\r\n    } else if (repository === \"All\") {\r\n      try {\r\n        //both json arrays are merged here\r\n        var res1 = await fetch(url);\r\n        var data1 = await res1.json();\r\n        var res2 = await fetch(url2);\r\n        var data2 = await res2.json();\r\n        var res = [...data1, ...data2];\r\n        setItems(res);\r\n      } catch (e) {\r\n        console.error(e);\r\n      } finally {\r\n        //setLoading(false)\r\n      }\r\n    } else if (repository === \"TYPE\") {\r\n      alert(\"Select repository type to begin search...\");\r\n    }\r\n  }, [word, repository]);\r\n\r\n  return { datas, isLoading };\r\n};\r\n\r\nexport default useFetch;\r\n"]},"metadata":{},"sourceType":"module"}