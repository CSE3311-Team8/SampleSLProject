{"ast":null,"code":"import { useState } from \"react\";\nimport { useEffect } from \"react\";\n\nconst useFetch = (repository, word) => {\n  const pageLimit = 10;\n  const [datas, setItems] = useState([]);\n  const [isLoading, setLoading] = useState(false);\n  const url = `https://bkkedr0m0e.execute-api.us-east-1.amazonaws.com?q=${word}&page=1&limit${pageLimit}`;\n  const url2 = 'http://localhost:9000/items2'; //will execute function when data is updated\n\n  useEffect(async () => {\n    console.log(repository);\n    setLoading(false);\n\n    if (repository === 'GitHub') {\n      setLoading(true);\n      const response = await fetch(url, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\"\n        },\n        mode: 'no-cors'\n      });\n      console.log(data);\n      const data = await response.json();\n      setItems(data);\n      setLoading(false);\n    } else if (repository === 'MATC') {\n      setLoading(true);\n      const response = await fetch(url2, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\"\n        }\n      });\n      const data = await response.json();\n      setItems(data);\n      setLoading(false);\n    } else if (repository === 'All') {\n      try {\n        //both json arrays are merged here\n        var res1 = await fetch(url);\n        var data1 = await res1.json();\n        var res2 = await fetch(url2);\n        var data2 = await res2.json();\n        var res = [...data1, ...data2];\n        setItems(res);\n      } catch (e) {\n        console.error(e);\n      } finally {//setLoading(false)\n      }\n    } else if (repository === 'TYPE') {\n      alert('Select repository type to begin search...');\n    }\n  }, [word, repository]);\n  return {\n    datas,\n    isLoading\n  };\n};\n\nexport default useFetch;","map":{"version":3,"sources":["C:/Users/carlo/OneDrive/Desktop/simulink-tool/SampleSLProject/src/controllers/useFetch.js"],"names":["useState","useEffect","useFetch","repository","word","pageLimit","datas","setItems","isLoading","setLoading","url","url2","console","log","response","fetch","headers","Accept","mode","data","json","res1","data1","res2","data2","res","e","error","alert"],"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,SAAT,QAA0B,OAA1B;;AAEA,MAAMC,QAAQ,GAAG,CAACC,UAAD,EAAaC,IAAb,KAAqB;AAGpC,QAAMC,SAAS,GAAG,EAAlB;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACQ,SAAD,EAAYC,UAAZ,IAA0BT,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAMU,GAAG,GAAI,4DAA2DN,IAAK,gBAAeC,SAAU,EAAtG;AACA,QAAMM,IAAI,GAAG,8BAAb,CAPoC,CASpC;;AACAV,EAAAA,SAAS,CAAC,YAAW;AACnBW,IAAAA,OAAO,CAACC,GAAR,CAAYV,UAAZ;AACAM,IAAAA,UAAU,CAAC,KAAD,CAAV;;AACA,QAAGN,UAAU,KAAK,QAAlB,EACA;AACEM,MAAAA,UAAU,CAAC,IAAD,CAAV;AAEA,YAAMK,QAAQ,GAAG,MAAMC,KAAK,CAACL,GAAD,EAAK;AAE/BM,QAAAA,OAAO,EAAE;AACP,0BAAgB,kBADT;AAEPC,UAAAA,MAAM,EAAE;AAFD,SAFsB;AAO/BC,QAAAA,IAAI,EAAC;AAP0B,OAAL,CAA5B;AASAN,MAAAA,OAAO,CAACC,GAAR,CAAYM,IAAZ;AACA,YAAMA,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAT,EAAnB;AACAb,MAAAA,QAAQ,CAACY,IAAD,CAAR;AACAV,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAjBD,MAkBK,IAAGN,UAAU,KAAK,MAAlB,EACL;AACEM,MAAAA,UAAU,CAAC,IAAD,CAAV;AACA,YAAMK,QAAQ,GAAG,MAAMC,KAAK,CAACJ,IAAD,EAAM;AAChCK,QAAAA,OAAO,EAAE;AACP,0BAAgB,kBADT;AAEPC,UAAAA,MAAM,EAAE;AAFD;AADuB,OAAN,CAA5B;AAOA,YAAME,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAT,EAAnB;AACAb,MAAAA,QAAQ,CAACY,IAAD,CAAR;AACAV,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAbI,MAcA,IAAIN,UAAU,KAAK,KAAnB,EACL;AACE,UAAG;AAAC;AACF,YAAIkB,IAAI,GAAG,MAAMN,KAAK,CAACL,GAAD,CAAtB;AACA,YAAIY,KAAK,GAAG,MAAMD,IAAI,CAACD,IAAL,EAAlB;AACA,YAAIG,IAAI,GAAG,MAAMR,KAAK,CAACJ,IAAD,CAAtB;AACA,YAAIa,KAAK,GAAG,MAAMD,IAAI,CAACH,IAAL,EAAlB;AACA,YAAIK,GAAG,GAAG,CAAC,GAAGH,KAAJ,EAAU,GAAGE,KAAb,CAAV;AACAjB,QAAAA,QAAQ,CAACkB,GAAD,CAAR;AACD,OAPD,CAOC,OAAMC,CAAN,EAAQ;AACLd,QAAAA,OAAO,CAACe,KAAR,CAAcD,CAAd;AACH,OATD,SASQ,CACN;AACD;AACF,KAdI,MAcC,IAAGvB,UAAU,KAAK,MAAlB,EACN;AACEyB,MAAAA,KAAK,CAAC,2CAAD,CAAL;AACD;AACF,GArDQ,EAqDN,CAACxB,IAAD,EAAOD,UAAP,CArDM,CAAT;AAwDA,SAAM;AAACG,IAAAA,KAAD;AAAQE,IAAAA;AAAR,GAAN;AAED,CApED;;AAuEA,eAAeN,QAAf","sourcesContent":["import { useState } from \"react\";\r\nimport { useEffect } from \"react\";\r\n\r\nconst useFetch = (repository, word) =>{\r\n  \r\n\r\n  const pageLimit = 10;\r\n  const [datas, setItems] = useState([]);\r\n  const [isLoading, setLoading] = useState(false);\r\n  const url = `https://bkkedr0m0e.execute-api.us-east-1.amazonaws.com?q=${word}&page=1&limit${pageLimit}`;\r\n  const url2 = 'http://localhost:9000/items2';\r\n  \r\n  //will execute function when data is updated\r\n  useEffect(async() => {\r\n    console.log(repository);\r\n    setLoading(false);\r\n    if(repository === 'GitHub')\r\n    {\r\n      setLoading(true);\r\n\r\n      const response = await fetch(url,{\r\n\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Accept: \"application/json\"\r\n          \r\n        },\r\n        mode:'no-cors'\r\n      });\r\n      console.log(data);\r\n      const data = await response.json();\r\n      setItems(data);\r\n      setLoading(false);\r\n    }\r\n    else if(repository === 'MATC')\r\n    {\r\n      setLoading(true);\r\n      const response = await fetch(url2,{\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Accept: \"application/json\"\r\n        },\r\n      });\r\n      \r\n      const data = await response.json();\r\n      setItems(data);\r\n      setLoading(false);\r\n    }\r\n    else if (repository === 'All')\r\n    {\r\n      try{//both json arrays are merged here\r\n        var res1 = await fetch(url);\r\n        var data1 = await res1.json();\r\n        var res2 = await fetch(url2);\r\n        var data2 = await res2.json();\r\n        var res = [...data1,...data2];\r\n        setItems(res);\r\n      }catch(e){\r\n          console.error(e)\r\n      }finally{\r\n        //setLoading(false)\r\n      }\r\n    }else if(repository === 'TYPE') \r\n    {\r\n      alert('Select repository type to begin search...');\r\n    }\r\n  }, [word, repository]);\r\n  \r\n  \r\n  return{datas, isLoading}\r\n\r\n}\r\n  \r\n\r\nexport default useFetch;"]},"metadata":{},"sourceType":"module"}