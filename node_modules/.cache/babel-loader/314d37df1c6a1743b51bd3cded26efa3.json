{"ast":null,"code":"import { useEffect, useState } from \"react\";\nimport { useQuery } from \"react-query\";\n\nconst useFetch = (repository, word) => {\n  const [datas, setItems] = useState([]);\n  const [isLoading, setLoading] = useState(false);\n  const [pageG, setPageG] = useState(1);\n  const [pageM, setPageM] = useState(1);\n  const [pageA, setPageA] = useState(1);\n  const pageLimit = 10;\n  const pageLimitAll = 5;\n\n  function GitHubProjects() {\n    ///////////////////////////////\n    const {\n      data,\n      status\n    } = useQuery([\"paginatedProjects\", pageG], () => fetchGitHubProjects(pageG), {\n      keepPreviousData: true\n    });\n    console.log(data);\n    setItems(data);\n  }\n\n  useEffect(() => {\n    console.log(repository);\n    console.log(word);\n    setLoading(false);\n\n    if (repository === \"GitHub\") {\n      setLoading(true);\n\n      const fetchGitHubProjects = async function () {\n        let page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n        const res = await fetch(`http://localhost:8000/items?q=math&_page=${page}&_limit=${pageLimit}`);\n        return res.json();\n      };\n\n      GitHubProjects();\n      setLoading(false);\n    } else if (repository === \"MATC\") {\n      const fetchMATCProjects = async function () {\n        let page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n        const res = await fetch(`http://localhost:5000/items2?q=math&_page=${page}&_limit=${pageLimit}`);\n        return res.json();\n      };\n\n      function MATCProjects() {\n        const {\n          data,\n          status\n        } = useQuery([\"paginatedProjects\", pageM], () => fetchMATCProjects(pageM), {\n          keepPreviousData: true\n        });\n        console.log(data);\n        setItems(data);\n      }\n\n      MATCProjects();\n      setLoading(false);\n    } else if (repository === \"All\") {\n      try {\n        //both json arrays are merged here\n        const fetchAllProjects = async function () {\n          let page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n          const res1 = await fetch(`http://localhost:5000/items2?q=math&_page=${page}&_limit=${pageLimitAll}`);\n          const res2 = await fetch(`http://localhost:8000/items?q=math&_page=${page}&_limit=${pageLimitAll}`);\n          var res = [...res1, ...res2];\n          return res.json();\n        };\n\n        function AllProjects() {\n          const {\n            data,\n            status\n          } = useQuery([\"paginatedProjects\", pageA], () => fetchAllProjects(pageA), {\n            keepPreviousData: true\n          });\n          console.log(data);\n          setItems(data);\n        }\n\n        AllProjects();\n      } catch (e) {\n        console.error(e);\n      } finally {\n        setLoading(false);\n      }\n    } else if (repository === \"TYPE\") {\n      alert(\"Select repository type to begin search...\");\n    }\n  }, [word, repository]);\n  return {\n    datas,\n    isLoading\n  };\n};\n\nexport default useFetch;","map":{"version":3,"sources":["C:/Users/carlo/OneDrive/Desktop/simulink-tool/SampleSLProject/src/controllers/useFetch.js"],"names":["useEffect","useState","useQuery","useFetch","repository","word","datas","setItems","isLoading","setLoading","pageG","setPageG","pageM","setPageM","pageA","setPageA","pageLimit","pageLimitAll","GitHubProjects","data","status","fetchGitHubProjects","keepPreviousData","console","log","page","res","fetch","json","fetchMATCProjects","MATCProjects","fetchAllProjects","res1","res2","AllProjects","e","error","alert"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { useQuery } from \"react-query\";\r\n\r\nconst useFetch = (repository, word) => {\r\n  const [datas, setItems] = useState([]);\r\n  const [isLoading, setLoading] = useState(false);\r\n  const [pageG, setPageG] = useState(1);\r\n  const [pageM, setPageM] = useState(1);\r\n  const [pageA, setPageA] = useState(1);\r\n\r\n  const pageLimit = 10;\r\n  const pageLimitAll = 5;\r\n\r\n  function GitHubProjects() {///////////////////////////////\r\n    const { data, status } = useQuery(\r\n      [\"paginatedProjects\", pageG],\r\n      () => fetchGitHubProjects(pageG),\r\n      {\r\n        keepPreviousData: true,\r\n      }\r\n    );\r\n    console.log(data);\r\n    setItems(data);\r\n  }\r\n\r\n  useEffect(() => {\r\n    console.log(repository);\r\n    console.log(word);\r\n    setLoading(false);\r\n    if (repository === \"GitHub\") {\r\n      setLoading(true);\r\n      const fetchGitHubProjects = async (page = 1) => {\r\n        const res = await fetch(\r\n          `http://localhost:8000/items?q=math&_page=${page}&_limit=${pageLimit}`\r\n        );\r\n        return res.json();\r\n      };\r\n      GitHubProjects();\r\n      setLoading(false);\r\n    } else if (repository === \"MATC\") {\r\n      const fetchMATCProjects = async (page = 1) => {\r\n        const res = await fetch(\r\n          `http://localhost:5000/items2?q=math&_page=${page}&_limit=${pageLimit}`\r\n        );\r\n        return res.json();\r\n      };\r\n\r\n      function MATCProjects() {\r\n        const { data, status } = useQuery(\r\n          [\"paginatedProjects\", pageM],\r\n          () => fetchMATCProjects(pageM),\r\n          {\r\n            keepPreviousData: true,\r\n          }\r\n        );\r\n        console.log(data);\r\n        setItems(data);\r\n      }\r\n      MATCProjects();\r\n      setLoading(false);\r\n    } else if (repository === \"All\") {\r\n      try {\r\n        //both json arrays are merged here\r\n        const fetchAllProjects = async (page = 1) => {\r\n          const res1 = await fetch(\r\n            `http://localhost:5000/items2?q=math&_page=${page}&_limit=${pageLimitAll}`\r\n          );\r\n          const res2 = await fetch(\r\n            `http://localhost:8000/items?q=math&_page=${page}&_limit=${pageLimitAll}`\r\n          );\r\n          var res = [...res1, ...res2];\r\n          return res.json();\r\n        };\r\n\r\n        function AllProjects() {\r\n          const { data, status } = useQuery(\r\n            [\"paginatedProjects\", pageA],\r\n            () => fetchAllProjects(pageA),\r\n            {\r\n              keepPreviousData: true,\r\n            }\r\n          );\r\n          console.log(data);\r\n          setItems(data);\r\n        }\r\n        AllProjects();\r\n      } catch (e) {\r\n        console.error(e);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    } else if (repository === \"TYPE\") {\r\n      alert(\"Select repository type to begin search...\");\r\n    }\r\n  }, [word, repository]);\r\n\r\n  return { datas, isLoading };\r\n};\r\n\r\nexport default useFetch;\r\n"]},"metadata":{},"sourceType":"module"}