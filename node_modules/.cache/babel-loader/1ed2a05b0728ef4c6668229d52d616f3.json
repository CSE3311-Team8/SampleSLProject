{"ast":null,"code":"import { useState } from \"react\";\nimport { useEffect } from \"react\";\nimport { useQuery } from \"react-query\";\n\nconst useFetch = (repository, word) => {\n  const pageLimit = 10;\n\n  const fetchProjects = async function () {\n    let page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    const res = await fetch(`http://localhost:8000/items/Description?q=arduino&_page=${page}&_limit=${pageLimit}`);\n    return res.json();\n  }; //data is the returned res.json() from fetchProjects()\n  //status is the status of the function\n\n\n  function Projects() {\n    const [page, setPage] = useState(1);\n    const {\n      data,\n      status\n    } = useQuery([\"paginatedProjects\", page], () => fetchProjects(page), {\n      keepPreviousData: false\n    });\n    console.log(data);\n  }\n\n  Projects();\n  const [datas, setItems] = useState([]);\n  const [isLoading, setLoading] = useState(false);\n  const url = \"http://localhost:8000/items\";\n  const url2 = \"http://localhost:5000/items2\"; //will execute function when data is updated\n\n  useEffect(async () => {\n    console.log(repository);\n    setLoading(false);\n\n    if (repository === \"GitHub\") {\n      setLoading(true);\n      const response = await fetch(url, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\"\n        },\n        body: {\n          Description: \"\"\n        }\n      });\n      const data = await response.json();\n      setItems(data);\n      setLoading(false);\n    } else if (repository === \"MATC\") {\n      setLoading(true);\n      const response = await fetch(url2, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\"\n        }\n      });\n      const data = await response.json();\n      setItems(data);\n      setLoading(false);\n    } else if (repository === \"All\") {\n      try {\n        //both json arrays are merged here\n        var res1 = await fetch(url);\n        var data1 = await res1.json();\n        var res2 = await fetch(url2);\n        var data2 = await res2.json();\n        var res = [...data1, ...data2];\n        setItems(res);\n      } catch (e) {\n        console.error(e);\n      } finally {//setLoading(false)\n      }\n    } else if (repository === \"TYPE\") {\n      alert(\"Select repository type to begin search...\");\n    }\n  }, [word, repository]);\n  return {\n    datas,\n    isLoading\n  };\n};\n\nexport default useFetch;","map":{"version":3,"sources":["C:/Users/carlo/OneDrive/Desktop/simulink-tool/SampleSLProject/src/controllers/useFetch.js"],"names":["useState","useEffect","useQuery","useFetch","repository","word","pageLimit","fetchProjects","page","res","fetch","json","Projects","setPage","data","status","keepPreviousData","console","log","datas","setItems","isLoading","setLoading","url","url2","response","headers","Accept","body","Description","res1","data1","res2","data2","e","error","alert"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport { useQuery } from \"react-query\";\r\n\r\nconst useFetch = (repository, word) => {\r\n  const pageLimit = 10;\r\n\r\n  const fetchProjects = async (page = 1) => {\r\n    const res = await fetch(\r\n      `http://localhost:8000/items/Description?q=arduino&_page=${page}&_limit=${pageLimit}`\r\n    );\r\n    return res.json();\r\n  };\r\n  //data is the returned res.json() from fetchProjects()\r\n  //status is the status of the function\r\n\r\n  function Projects() {\r\n    const [page, setPage] = useState(1);\r\n    const { data, status } = useQuery([\"paginatedProjects\", page], () => fetchProjects(page),{\r\n      keepPreviousData: false\r\n    });\r\n    console.log(data);\r\n  }\r\n  Projects();\r\n  const [datas, setItems] = useState([]);\r\n  const [isLoading, setLoading] = useState(false);\r\n\r\n  const url = \"http://localhost:8000/items\";\r\n  const url2 = \"http://localhost:5000/items2\";\r\n\r\n  //will execute function when data is updated\r\n  useEffect(async () => {\r\n    console.log(repository);\r\n    setLoading(false);\r\n    if (repository === \"GitHub\") {\r\n      setLoading(true);\r\n\r\n      const response = await fetch(url, {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Accept: \"application/json\",\r\n        },\r\n        body: {\r\n          Description: \"\"\r\n        },\r\n      });\r\n\r\n      const data = await response.json();\r\n      setItems(data);\r\n      setLoading(false);\r\n    } else if (repository === \"MATC\") {\r\n      setLoading(true);\r\n      const response = await fetch(url2, {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Accept: \"application/json\",\r\n        },\r\n      });\r\n\r\n      const data = await response.json();\r\n      setItems(data);\r\n      setLoading(false);\r\n    } else if (repository === \"All\") {\r\n      try {\r\n        //both json arrays are merged here\r\n        var res1 = await fetch(url);\r\n        var data1 = await res1.json();\r\n        var res2 = await fetch(url2);\r\n        var data2 = await res2.json();\r\n        var res = [...data1, ...data2];\r\n        setItems(res);\r\n      } catch (e) {\r\n        console.error(e);\r\n      } finally {\r\n        //setLoading(false)\r\n      }\r\n    } else if (repository === \"TYPE\") {\r\n      alert(\"Select repository type to begin search...\");\r\n    }\r\n  }, [word, repository]);\r\n\r\n  return { datas, isLoading };\r\n};\r\n\r\nexport default useFetch;\r\n"]},"metadata":{},"sourceType":"module"}