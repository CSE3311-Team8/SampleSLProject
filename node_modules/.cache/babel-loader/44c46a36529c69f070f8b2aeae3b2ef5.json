{"ast":null,"code":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"react-query\";\n\nconst useFetch = (repository, word) => {\n  const [datas, setItems] = useState([]);\n  const [isLoading, setLoading] = useState(false);\n  const pageLimit = 10;\n  const pageLimitAll = 5;\n  useEffect(() => {\n    console.log(repository);\n    console.log(word);\n    setLoading(false);\n\n    if (repository === \"GitHub\") {\n      setLoading(true);\n\n      const fetchGitHubProjects = async function () {\n        let page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n        const res = await fetch(`http://localhost:8000/items?q=math&_page=${page}&_limit=${pageLimit}`);\n        return setItems(res.json());\n      };\n\n      fetchGitHubProjects();\n      setLoading(false);\n    } else if (repository === \"MATC\") {\n      setLoading(true);\n\n      const fetchMATCProjects = async function () {\n        let page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n        const res = await fetch(`http://localhost:5000/items2?q=math&_page=${page}&_limit=${pageLimit}`);\n        return setItems(res.json());\n      };\n\n      fetchMATCProjects();\n      setLoading(false);\n    } else if (repository === \"All\") {\n      try {\n        //both json arrays are merged here\n        const fetchAllProjects = async function () {\n          let page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n          const res1 = await fetch(`http://localhost:5000/items2?q=math&_page=${page}&_limit=${pageLimitAll}`);\n          const res2 = await fetch(`http://localhost:8000/items?q=math&_page=${page}&_limit=${pageLimitAll}`);\n          var res = [...res1, ...res2];\n          return setItems(res.json());\n        };\n\n        fetchAllProjects();\n        setLoading(false);\n      } catch (e) {\n        console.error(e);\n      } finally {\n        setLoading(false);\n      }\n    } else if (repository === \"TYPE\") {\n      alert(\"Select repository type to begin search...\");\n    }\n  }, [word, repository]);\n  return {\n    datas,\n    isLoading\n  };\n};\n\nexport default useFetch;","map":{"version":3,"sources":["C:/Users/carlo/OneDrive/Desktop/simulink-tool/SampleSLProject/src/controllers/useFetch.js"],"names":["useState","useEffect","useQuery","useFetch","repository","word","datas","setItems","isLoading","setLoading","pageLimit","pageLimitAll","console","log","fetchGitHubProjects","page","res","fetch","json","fetchMATCProjects","fetchAllProjects","res1","res2","e","error","alert"],"mappings":"AAAA,SAASA,QAAT,EAAkBC,SAAlB,QAAmC,OAAnC;AACA,SAASC,QAAT,QAAyB,aAAzB;;AAEA,MAAMC,QAAQ,GAAG,CAACC,UAAD,EAAaC,IAAb,KAAsB;AAErC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACQ,SAAD,EAAYC,UAAZ,IAA0BT,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAMU,SAAS,GAAG,EAAlB;AACA,QAAMC,YAAY,GAAG,CAArB;AAEAV,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,OAAO,CAACC,GAAR,CAAYT,UAAZ;AACAQ,IAAAA,OAAO,CAACC,GAAR,CAAYR,IAAZ;AACAI,IAAAA,UAAU,CAAC,KAAD,CAAV;;AACA,QAAIL,UAAU,KAAK,QAAnB,EACA;AACEK,MAAAA,UAAU,CAAC,IAAD,CAAV;;AACA,YAAMK,mBAAmB,GAAG,kBAAoB;AAAA,YAAbC,IAAa,uEAAN,CAAM;AAC9C,cAAMC,GAAG,GAAG,MAAMC,KAAK,CACpB,4CAA2CF,IAAK,WAAUL,SAAU,EADhD,CAAvB;AAGA,eAAOH,QAAQ,CAACS,GAAG,CAACE,IAAJ,EAAD,CAAf;AACD,OALD;;AAMAJ,MAAAA,mBAAmB;AACnBL,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAXD,MAYK,IAAIL,UAAU,KAAK,MAAnB,EACL;AACEK,MAAAA,UAAU,CAAC,IAAD,CAAV;;AACA,YAAMU,iBAAiB,GAAG,kBAAoB;AAAA,YAAbJ,IAAa,uEAAN,CAAM;AAC5C,cAAMC,GAAG,GAAG,MAAMC,KAAK,CACpB,6CAA4CF,IAAK,WAAUL,SAAU,EADjD,CAAvB;AAGA,eAAOH,QAAQ,CAACS,GAAG,CAACE,IAAJ,EAAD,CAAf;AACD,OALD;;AAMAC,MAAAA,iBAAiB;AACjBV,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAXI,MAWE,IAAIL,UAAU,KAAK,KAAnB,EAA0B;AAC/B,UAAI;AACF;AACA,cAAMgB,gBAAgB,GAAG,kBAAoB;AAAA,cAAbL,IAAa,uEAAN,CAAM;AAC3C,gBAAMM,IAAI,GAAG,MAAMJ,KAAK,CACrB,6CAA4CF,IAAK,WAAUJ,YAAa,EADnD,CAAxB;AAGA,gBAAMW,IAAI,GAAG,MAAML,KAAK,CACrB,4CAA2CF,IAAK,WAAUJ,YAAa,EADlD,CAAxB;AAGA,cAAIK,GAAG,GAAG,CAAC,GAAGK,IAAJ,EAAU,GAAGC,IAAb,CAAV;AACA,iBAAOf,QAAQ,CAACS,GAAG,CAACE,IAAJ,EAAD,CAAf;AACD,SATD;;AAUAE,QAAAA,gBAAgB;AAChBX,QAAAA,UAAU,CAAC,KAAD,CAAV;AACD,OAdD,CAcE,OAAOc,CAAP,EAAU;AACVX,QAAAA,OAAO,CAACY,KAAR,CAAcD,CAAd;AACD,OAhBD,SAgBU;AACRd,QAAAA,UAAU,CAAC,KAAD,CAAV;AACD;AACF,KApBM,MAoBA,IAAIL,UAAU,KAAK,MAAnB,EAA2B;AAChCqB,MAAAA,KAAK,CAAC,2CAAD,CAAL;AACD;AACF,GAlDQ,EAkDN,CAACpB,IAAD,EAAOD,UAAP,CAlDM,CAAT;AAoDA,SAAO;AAAEE,IAAAA,KAAF;AAASE,IAAAA;AAAT,GAAP;AACD,CA5DD;;AA8DA,eAAeL,QAAf","sourcesContent":["import { useState,useEffect } from \"react\";\r\nimport { useQuery } from \"react-query\";\r\n\r\nconst useFetch = (repository, word) => {\r\n\r\n  const [datas, setItems] = useState([]);\r\n  const [isLoading, setLoading] = useState(false);\r\n  const pageLimit = 10;\r\n  const pageLimitAll = 5;\r\n\r\n  useEffect(() => {\r\n    console.log(repository);\r\n    console.log(word);\r\n    setLoading(false);\r\n    if (repository === \"GitHub\") \r\n    {\r\n      setLoading(true);\r\n      const fetchGitHubProjects = async (page = 1) => {\r\n        const res = await fetch(\r\n          `http://localhost:8000/items?q=math&_page=${page}&_limit=${pageLimit}`\r\n        );\r\n        return setItems(res.json());\r\n      };\r\n      fetchGitHubProjects();\r\n      setLoading(false);\r\n    } \r\n    else if (repository === \"MATC\") \r\n    {\r\n      setLoading(true);\r\n      const fetchMATCProjects = async (page = 1) => {\r\n        const res = await fetch(\r\n          `http://localhost:5000/items2?q=math&_page=${page}&_limit=${pageLimit}`\r\n        );\r\n        return setItems(res.json());\r\n      };\r\n      fetchMATCProjects();\r\n      setLoading(false);\r\n    } else if (repository === \"All\") {\r\n      try {\r\n        //both json arrays are merged here\r\n        const fetchAllProjects = async (page = 1) => {\r\n          const res1 = await fetch(\r\n            `http://localhost:5000/items2?q=math&_page=${page}&_limit=${pageLimitAll}`\r\n          );\r\n          const res2 = await fetch(\r\n            `http://localhost:8000/items?q=math&_page=${page}&_limit=${pageLimitAll}`\r\n          );\r\n          var res = [...res1, ...res2];\r\n          return setItems(res.json());\r\n        };\r\n        fetchAllProjects();\r\n        setLoading(false);\r\n      } catch (e) {\r\n        console.error(e);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    } else if (repository === \"TYPE\") {\r\n      alert(\"Select repository type to begin search...\");\r\n    }\r\n  }, [word, repository]);\r\n\r\n  return { datas, isLoading };\r\n};\r\n\r\nexport default useFetch;\r\n"]},"metadata":{},"sourceType":"module"}